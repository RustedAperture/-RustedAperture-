{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import GithubSlugger from \"github-slugger\"\nimport { defineDocumentType, makeSource, defineNestedType } from 'contentlayer/source-files'\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeCodeTitles from 'rehype-code-titles'\nimport rehypePrism from 'rehype-prism-plus'\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport { type Options } from \"rehype-pretty-code\"\n\nexport const rehypePrettyCodeOptions: Partial<Options> = {\n    theme: \"one-dark-pro\",\n    onVisitHighlightedLine(node) {\n        node.properties.className.push(\"line--highlighted\")\n    },\n}\n\nconst Tag = defineNestedType(() => ({\n    name: 'Tag',\n    fields: {\n        title: { type: 'string' },\n    },\n}))\n\nconst Categories = defineNestedType(() => ({\n    name: 'Categories',\n    fields: {\n        title: { type: 'string' },\n    },\n}))\n\nconst Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string', required: true,\n        },\n        date: {\n            type: 'date',\n            required: true,\n        },\n        author: {\n            type: 'string',\n            required: false,\n\n        },\n        description: {\n            type: 'string',\n            required: true,\n\n        },\n        slug: {\n            type: 'string',\n        },\n        id: {\n            type: 'number',\n            required: false,\n        },\n        image: {\n            type: 'string',\n\n        },\n        draft: {\n            type: 'boolean',\n            required: true,\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' }\n        },\n        categories: {\n            type: 'list',\n            of: { type: 'string' }\n        },\n        toc: {\n            type: \"boolean\",\n            required: false,\n            default: false,\n        },\n    },\n    wordCount: {\n        type: 'number',\n        resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n    },\n    computedFields: {\n        slug: {\n            type: \"string\",\n            resolve: (post) => `/posts/${post._raw.flattenedPath}`,\n        },\n        headings: {\n            type: \"json\",\n            resolve: async (doc) => {\n                const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n                const slugger = new GithubSlugger()\n                const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n                    ({ groups }) => {\n                        const flag = groups?.flag;\n                        const content = groups?.content;\n                        return {\n                            level: flag?.length == 1 ? \"one\"\n                                : flag?.length == 2 ? \"two\"\n                                    : flag?.length == 3 ? \"three\"\n                                        : \"four\",\n                            text: content,\n                            slug: content ? slugger.slug(content) : undefined\n                        };\n                    }\n                );\n                return headings;\n            },\n        },\n    },\n}))\n\nexport default makeSource({\n    contentDirPath: 'data',\n    documentTypes: [Post],\n    mdx: {\n        rehypePlugins: [\n            rehypeSlug,\n            rehypePrettyCode,\n            rehypePrettyCodeOptions\n        ],\n    },\n})\n"],
  "mappings": ";AAAA,OAAO,mBAAmB;AAC1B,SAAS,oBAAoB,YAAY,wBAAwB;AACjE,OAAO,gBAAgB;AAGvB,OAAO,sBAAsB;AAGtB,IAAM,0BAA4C;AAAA,EACrD,OAAO;AAAA,EACP,uBAAuB,MAAM;AACzB,SAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,EACtD;AACJ;AAEA,IAAM,MAAM,iBAAiB,OAAO;AAAA,EAChC,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,SAAS;AAAA,EAC5B;AACJ,EAAE;AAEF,IAAM,aAAa,iBAAiB,OAAO;AAAA,EACvC,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,SAAS;AAAA,EAC5B;AACJ,EAAE;AAEF,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MAAU,UAAU;AAAA,IAC9B;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IAEd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IAEd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,IACV;AAAA,IACA,IAAI;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,IAEV;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,IACA,YAAY;AAAA,MACR,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,WAAW;AAAA,IACP,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAClD;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK;AAAA,IAC3C;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACpB,cAAM,aAAa;AACnB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC3D,CAAC,EAAE,OAAO,MAAM;AACZ,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACH,OAAO,MAAM,UAAU,IAAI,QACrB,MAAM,UAAU,IAAI,QAChB,MAAM,UAAU,IAAI,UAChB;AAAA,cACd,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC5C;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACD,eAAe;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;",
  "names": []
}
